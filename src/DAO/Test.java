package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import fc.Abonne_parent;
import fc.Client;
import fc.DVD;

public class Test {
	public static boolean initialisation (Connection conn) throws SQLException {
		String Table = "drop table Genre;\r\n"
				+ "drop table Restriction;\r\n"
				+ "drop table Acteur;\r\n"
				+ "drop table DVD;\r\n"
				+ "drop table AbonneEnfant;\r\n"
				+ "drop table CarteBancaire;\r\n"
				+ "drop table AbonneParent;\r\n"
				+ "drop table Abonne;\r\n"
				+ "drop table Location;\r\n"
				+ "drop table Client;\r\n"
				+ "drop table Support;\r\n"
				+ "drop table Film;\r\n"
				+ "drop table TypeGenre;\r\n"
				+ "\r\n"
				+ "Create table Client (\r\n"
				+ "    noClient number(10) primary key check (noClient between 1 and 9999999999),\r\n"
				+ "    typeClient varchar2(20) check (typeClient in ('Abonne Parent', 'Abonne Enfant', 'Sans Carte'))\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Film (\r\n"
				+ "    noFilm number(10) primary key check (noFilm between 1 and 9999999999),\r\n"
				+ "    titreFilm varchar2(20),\r\n"
				+ "    nomRealisateur varchar2(20),\r\n"
				+ "    dateSortie number(4),\r\n"
				+ "    resume varchar2(1000),\r\n"
				+ "    restrictionAge number(2) check (restrictionAge in (10, 12, 16, 18, 0)),\r\n"
				+ "    nbLoue number(10)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table TypeGenre (\r\n"
				+ "    genre varchar2(20) primary key\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Support (\r\n"
				+ "    noSupport number(10) primary key check (noSupport between 1 and 9999999999),\r\n"
				+ "    noFilm number(10) references Film(noFilm),\r\n"
				+ "    typeSupport varchar2(20) check (typeSupport in ('QRCode', 'DVD'))\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Location (\r\n"
				+ "    noClient number(10) references Client(noClient),\r\n"
				+ "    noSupport number(10) references Support(noSupport),\r\n"
				+ "    dateEmprunt date,\r\n"
				+ "    retourne number(1) check (retourne between 0 and 1),\r\n"
				+ "    dateRetour date;\r\n"
				+ "    primary key (noClient, noSupport, dateEmprunt)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Abonne (\r\n"
				+ "    noClient number(10) references Client(noClient),\r\n"
				+ "    nomAbonne varchar2(20),\r\n"
				+ "    prenomAbonne varchar2(20),\r\n"
				+ "    adAbonne varchar2(100),\r\n"
				+ "    noTel varchar(11),\r\n"
				+ "    solde number(4),\r\n"
				+ "    primary key (noClient)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table CarteBancaire(\r\n"
				+ "    noClient number(10) references Client(noClient),\r\n"
				+ "    nomBanque varchar2(20),\r\n"
				+ "    typeCarte varchar2(20),\r\n"
				+ "    refBancaire varchar(12),\r\n"
				+ "    dateUtil date,\r\n"
				+ "    primary key (noClient)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table AbonneParent (\r\n"
				+ "    noClient number(10) references Abonne(noClient),\r\n"
				+ "    nbEnfant number(2) check (nbEnfant between 0 and 99),\r\n"
				+ "    primary key (noClient)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table AbonneEnfant (\r\n"
				+ "    noClient number(10) references Abonne(noClient),\r\n"
				+ "    noParent number(10) references AbonneParent(noClient),\r\n"
				+ "    restrictionAge number(2) check (restrictionAge in (10, 12, 16, 18, 0)),\r\n"
				+ "    primary key (noClient)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Genre (\r\n"
				+ "    noFilm number(10) references Film(noFilm),\r\n"
				+ "    genre varchar2(20) references TypeGenre(Genre),\r\n"
				+ "    primary key (noFilm, genre)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Restriction (\r\n"
				+ "    noClient number(10) references AbonneEnfant(noClient),\r\n"
				+ "    genre varchar2(20) references TypeGenre(genre),\r\n"
				+ "    primary key (noClient, genre)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table Acteur (\r\n"
				+ "    noFilm number(10) references Film(noFilm),\r\n"
				+ "    nomActeur varchar2(20),\r\n"
				+ "    prenomActeur varchar2(20),\r\n"
				+ "    primary key (noFilm, nomActeur, prenomActeur)\r\n"
				+ ");\r\n"
				+ "\r\n"
				+ "Create table DVD (\r\n"
				+ "    noSupport number(10) references Support(noSupport),\r\n"
				+ "    etat varchar2(20) check (etat in ('Endommage', 'Bon')),\r\n"
				+ "    emplacement number(3),\r\n"
				+ "    primary key (noSupport)\r\n"
				+ ");\r\n"
				+ "\n";
		
		String Trigger = "Create or replace trigger NbEnfant\r\n"
				+ "Before delete or insert on AbonneEnfant\r\n"
				+ "for each row\r\n"
				+ "Begin \r\n"
				+ "	if (deleting) then\r\n"
				+ "		update AbonneParent Set nbEnfant = nbEnfant-1 \r\n"
				+ "							where noClient = :old.noParent;\r\n"
				+ "	else\r\n"
				+ "		update AbonneParent Set nbEnfant = nbEnfant+1 \r\n"
				+ "							where noClient = :new.noParent;\r\n"
				+ "	end if;\r\n"
				+ "End;\r\n"
				+ "/\r\n"
				+ "\r\n"
				+ "Create or replace trigger LocationFilm\r\n"
				+ "Before insert on Location\r\n"
				+ "for each row\r\n"
				+ "declare \r\n"
				+ "	nb integer;\r\n"
				+ "	Carte varchar2(20);\r\n"
				+ "Begin \r\n"
				+ "	Select Count(*) into nb from Location \r\n"
				+ "		where retourne = 0 and noSupport = :new.noSupport;\r\n"
				+ "	if (nb != 0) then\r\n"
				+ "		raise_application_error(-20001, 'Support indisponible');\r\n"
				+ "	end if;\r\n"
				+ "\r\n"
				+ "	select typeClient into Carte from Client \r\n"
				+ "		where noClient = :new.noClient;\r\n"
				+ "	if ( Carte = 'Sans Carte') then\r\n"
				+ "			\r\n"
				+ "			Select count(*) into nb from Location\r\n"
				+ "				where noClient = :new.noClient and retourne = 0;\r\n"
				+ "			if (nb != 0) then\r\n"
				+ "				raise_application_error(-20002, 'Trop de film en location');\r\n"
				+ "			end if;\r\n"
				+ "\r\n"
				+ "		update CarteBancaire set dateUtil = :new.dateEmprunt \r\n"
				+ "			where noClient = :new.noClient;\r\n"
				+ "	else\r\n"
				+ "		Select count(*) into nb from Location\r\n"
				+ "			where noClient = :new.noClient and retourne = 0;\r\n"
				+ "		if (nb > 2) then\r\n"
				+ "			raise_application_error(-20002, 'Trop de film en location');\r\n"
				+ "		end if;\r\n"
				+ "\r\n"
				+ "		Select solde into nb from Abonne \r\n"
				+ "			where noClient = :new.noClient;\r\n"
				+ "		if (nb < 15) then\r\n"
				+ "			raise_application_error(-20003, 'Solde insuffisant');\r\n"
				+ "		end if;\r\n"
				+ "	end if;\r\n"
				+ "\r\n"
				+ "    update Film Set nbLoue = nbLoue+1 \r\n"
				+ "		where noFilm = (select distinct noFilm from Support \r\n"
				+ "			where noSupport = :new.noSupport);\r\n"
				+ "End;\r\n"
				+ "/\r\n"
				+ "\r\n"
				+ "Create or replace trigger RechargeCompte\r\n"
				+ "before update on Abonne\r\n"
				+ "for each row\r\n"
				+ "Begin\r\n"
				+ "	if (:new.solde < 10) then\r\n"
				+ "		raise_application_error(-20004, 'Recharge insuffisante');\r\n"
				+ "	end if;\r\n"
				+ "End;\r\n"
				+ "/\r\n"
				+ "\r\n"
				+ "Create or replace trigger CreationCompte\r\n"
				+ "before insert on Abonne\r\n"
				+ "for each row\r\n"
				+ "Begin\r\n"
				+ "	if (:new.solde < 15) then\r\n"
				+ "		raise_application_error(-20005, 'Solde de depart insuffant');\r\n"
				+ "	end if;\r\n"
				+ "End;\r\n"
				+ "/\r\n"
				+ "\r\n"
				+ "Create or replace trigger NvlCarteBancaire\r\n"
				+ "before insert on CarteBancaire\r\n"
				+ "for each row\r\n"
				+ "declare \r\n"
				+ "	nb integer;\r\n"
				+ "Begin\r\n"
				+ "	select count(noClient) into nb from CarteBancaire \r\n"
				+ "		where nomBanque = :new.nomBanque and typeCarte = :new.typeCarte and refBancaire = :new.refBancaire;\r\n"
				+ "	if (nb != 0) then\r\n"
				+ "		raise_application_error(-20006, 'Carte Bancaire existe deja');\r\n"
				+ "	end if;\r\n"
				+ "End;\r\n"
				+ "/\r\n"
				+ "\n";
		try (PreparedStatement creation_table = conn.prepareStatement(Table);
				PreparedStatement creation_trigger = conn.prepareStatement(Trigger)){   
            creation_table.executeUpdate();
            creation_trigger.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}		
		return false;
	}
    public static void main(String argv[]) throws SQLException{
        Session s = new Session();
        s.open();
        initialisation(Session.getSession());
        ClientDAO Client = new ClientDAO(Session.getSession());
		Abonne_parent Abonne_p = new Abonne_parent(10, "Test", "prenom", "adresse", "telephone", 15, null, null, null, null);
		Client.create(Abonne_p, "Abonne_parent");
		
        s.close();
    }
}